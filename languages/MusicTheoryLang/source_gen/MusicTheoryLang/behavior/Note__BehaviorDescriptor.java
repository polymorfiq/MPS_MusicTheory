package MusicTheoryLang.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SProperty;

public final class Note__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL, "MusicTheoryLang.structure.Note");

  public static final SMethod<SNode> withName_id7K_nJtnP2of = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("withName").modifiers(1, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651264812559L).languageId(0x852f1bd942b093e8L, 0x87d1018d30c44219L).build2(SMethodBuilder.createJavaParameter((Class<SEnumerationLiteral>) ((Class) Object.class), ""));
  public static final SMethod<Float> freq_hz_id7K_nJtnMj6W = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("freq_hz").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651264094652L).languageId(0x852f1bd942b093e8L, 0x87d1018d30c44219L).build2();
  public static final SMethod<Float> base_freq_id7K_nJtnMuEL = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("base_freq").modifiers(1, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651264142001L).languageId(0x852f1bd942b093e8L, 0x87d1018d30c44219L).build2(SMethodBuilder.createJavaParameter((Class<SEnumerationLiteral>) ((Class) Object.class), ""));
  public static final SMethod<SEnumerationLiteral> normalizedName_id7K_nJtnNJtr = new SMethodBuilder<SEnumerationLiteral>(new SJavaCompoundTypeImpl((Class<SEnumerationLiteral>) ((Class) Object.class))).name("normalizedName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651264472923L).languageId(0x852f1bd942b093e8L, 0x87d1018d30c44219L).build2();
  public static final SMethod<SEnumerationLiteral> normalizeName_id7K_nJtnO2sS = new SMethodBuilder<SEnumerationLiteral>(new SJavaCompoundTypeImpl((Class<SEnumerationLiteral>) ((Class) Object.class))).name("normalizeName").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651264550712L).languageId(0x852f1bd942b093e8L, 0x87d1018d30c44219L).build2(SMethodBuilder.createJavaParameter((Class<SEnumerationLiteral>) ((Class) Object.class), ""));
  public static final SMethod<SNode> closestNote_id7K_nJtodIyB = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("closestNote").modifiers(8, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(8945660651271284903L).languageId(0x852f1bd942b093e8L, 0x87d1018d30c44219L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(withName_id7K_nJtnP2of, freq_hz_id7K_nJtnMj6W, base_freq_id7K_nJtnMuEL, normalizedName_id7K_nJtnNJtr, normalizeName_id7K_nJtnO2sS, closestNote_id7K_nJtodIyB);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SPropertyOperations.assign(__thisNode__, PROPS.octave$3IC9, 0);
  }

  /*package*/ static SNode withName_id7K_nJtnP2of(@NotNull SAbstractConcept __thisConcept__, SEnumerationLiteral name) {
    SNode newNote = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL, "MusicTheoryLang.structure.Note"));
    SPropertyOperations.assignEnum(newNote, PROPS.name$nBvq, name);
    return newNote;
  }
  /*package*/ static float freq_hz_id7K_nJtnMj6W(@NotNull SNode __thisNode__) {
    float currFreq = ((float) Note__BehaviorDescriptor.base_freq_id7K_nJtnMuEL.invoke(__thisNode__.getConcept(), SPropertyOperations.getEnum(__thisNode__, PROPS.name$nBvq)));

    if (SPropertyOperations.getInteger(__thisNode__, PROPS.octave$3IC9) >= 0) {
      for (int i = SPropertyOperations.getInteger(__thisNode__, PROPS.octave$3IC9); i > 0; i--) {
        currFreq = currFreq * 2.0f;
      }
    } else {
      for (int i = SPropertyOperations.getInteger(__thisNode__, PROPS.octave$3IC9); i > 0; i--) {
        currFreq = currFreq / 2.0f;
      }
    }

    return currFreq;
  }
  /*package*/ static float base_freq_id7K_nJtnMuEL(@NotNull SAbstractConcept __thisConcept__, SEnumerationLiteral note) {
    switch (enumSwitchIndex.indexNullable(note)) {
      case 0:
        return 16.35f;
      case 1:
        return 17.32f;
      case 2:
        return 17.32f;
      case 3:
        return 18.35f;
      case 4:
        return 19.45f;
      case 5:
        return 19.45f;
      case 6:
        return 20.6f;
      case 7:
        return 21.83f;
      case 8:
        return 23.12f;
      case 9:
        return 23.12f;
      case 10:
        return 24.5f;
      case 11:
        return 25.96f;
      case 12:
        return 25.96f;
      case 13:
        return 27.5f;
      case 14:
        return 29.14f;
      case 15:
        return 29.14f;
      case 16:
        return 30.87f;
      default:
        return 0.0f;
    }
  }
  /*package*/ static SEnumerationLiteral normalizedName_id7K_nJtnNJtr(@NotNull SNode __thisNode__) {
    return ((SEnumerationLiteral) Note__BehaviorDescriptor.normalizeName_id7K_nJtnO2sS.invoke(__thisNode__, SPropertyOperations.getEnum(__thisNode__, PROPS.name$nBvq)));
  }
  /*package*/ static SEnumerationLiteral normalizeName_id7K_nJtnO2sS(@NotNull SNode __thisNode__, SEnumerationLiteral note) {
    switch (enumSwitchIndex1.indexNullable(note)) {
      case 0:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef62L, "C");
      case 1:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef63L, "CSharp");
      case 2:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef63L, "CSharp");
      case 3:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef65L, "D");
      case 4:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef66L, "DSharp");
      case 5:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef66L, "DSharp");
      case 6:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef68L, "E");
      case 7:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef69L, "F");
      case 8:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef6aL, "FSharp");
      case 9:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef6cL, "G");
      case 10:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef6dL, "GSharp");
      case 11:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef6fL, "A");
      case 12:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef70L, "ASharp");
      case 13:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757ceef72L, "B");
      default:
        return SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757ceeed7L, "MusicTheoryLang.structure.NoteNameNormalized"), 0x7c255ef757d00eecL, "unknown");
    }
  }
  /*package*/ static SNode closestNote_id7K_nJtodIyB(@NotNull SNode __thisNode__) {
    SNode cloned = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL, "MusicTheoryLang.structure.Note"));
    SPropertyOperations.assignEnum(cloned, PROPS.name$nBvq, SPropertyOperations.getEnum(__thisNode__, PROPS.name$nBvq));
    SPropertyOperations.assign(cloned, PROPS.octave$3IC9, SPropertyOperations.getInteger(__thisNode__, PROPS.octave$3IC9));
    return cloned;
  }

  /*package*/ Note__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 1:
        return (T) ((Float) freq_hz_id7K_nJtnMj6W(node));
      case 3:
        return (T) ((SEnumerationLiteral) normalizedName_id7K_nJtnNJtr(node));
      case 4:
        return (T) ((SEnumerationLiteral) normalizeName_id7K_nJtnO2sS(node, (SEnumerationLiteral) parameters[0]));
      case 5:
        return (T) ((SNode) closestNote_id7K_nJtodIyB(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) withName_id7K_nJtnP2of(concept, (SEnumerationLiteral) parameters[0]));
      case 2:
        return (T) ((Float) base_freq_id7K_nJtnMuEL(concept, (SEnumerationLiteral) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92c0dL, 0x7c255ef757c92c0eL, 0x7c255ef757c92c33L, 0x7c255ef757c92c55L, 0x7c255ef757c92c83L, 0x7c255ef757c92c9dL, 0x7c255ef757c92cc2L, 0x7c255ef757c92cc9L, 0x7c255ef757c92ce6L, 0x7c255ef757c92cefL, 0x7c255ef757c92d23L, 0x7c255ef757c92d4dL, 0x7c255ef757c92d64L, 0x7c255ef757c92d90L, 0x7c255ef757c92da9L, 0x7c255ef757c92dcdL, 0x7c255ef757c92dfcL, 0x7c255ef757c92e17L);
  private static final EnumerationLiteralsIndex enumSwitchIndex1 = EnumerationLiteralsIndex.build(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92c0dL, 0x7c255ef757c92c0eL, 0x7c255ef757c92c33L, 0x7c255ef757c92c55L, 0x7c255ef757c92c83L, 0x7c255ef757c92c9dL, 0x7c255ef757c92cc2L, 0x7c255ef757c92cc9L, 0x7c255ef757c92ce6L, 0x7c255ef757c92cefL, 0x7c255ef757c92d4dL, 0x7c255ef757c92d64L, 0x7c255ef757c92da9L, 0x7c255ef757c92dcdL, 0x7c255ef757c92e17L);

  private static final class PROPS {
    /*package*/ static final SProperty octave$3IC9 = MetaAdapterFactory.getProperty(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL, 0x7c255ef757c951a3L, "octave");
    /*package*/ static final SProperty name$nBvq = MetaAdapterFactory.getProperty(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL, 0x7c255ef757c93052L, "name");
  }
}
