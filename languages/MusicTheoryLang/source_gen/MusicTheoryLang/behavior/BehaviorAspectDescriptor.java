package MusicTheoryLang.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myPitch__BehaviorDescriptor = new Pitch__BehaviorDescriptor();
  private final BHDescriptor myNote__BehaviorDescriptor = new Note__BehaviorDescriptor();
  private final BHDescriptor myHarmony__BehaviorDescriptor = new Harmony__BehaviorDescriptor();
  private final BHDescriptor myMajorChord__BehaviorDescriptor = new MajorChord__BehaviorDescriptor();
  private final BHDescriptor myPitchCollection__BehaviorDescriptor = new PitchCollection__BehaviorDescriptor();
  private final BHDescriptor myMajorScale__BehaviorDescriptor = new MajorScale__BehaviorDescriptor();
  private final BHDescriptor myScale__BehaviorDescriptor = new Scale__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myHarmony__BehaviorDescriptor;
      case 1:
        return myMajorChord__BehaviorDescriptor;
      case 2:
        return myMajorScale__BehaviorDescriptor;
      case 3:
        return myNote__BehaviorDescriptor;
      case 4:
        return myPitch__BehaviorDescriptor;
      case 5:
        return myPitchCollection__BehaviorDescriptor;
      case 6:
        return myScale__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d2d2fbL), MetaIdFactory.conceptId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d2d3adL), MetaIdFactory.conceptId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d6b824L), MetaIdFactory.conceptId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL), MetaIdFactory.conceptId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92fa6L), MetaIdFactory.conceptId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d35145L), MetaIdFactory.conceptId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d6b83cL)).seal();
}
