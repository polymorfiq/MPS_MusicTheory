package MusicTheoryLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptChord = createDescriptorForChord();
  /*package*/ final ConceptDescriptor myConceptEmptySpace = createDescriptorForEmptySpace();
  /*package*/ final ConceptDescriptor myConceptHarmony = createDescriptorForHarmony();
  /*package*/ final ConceptDescriptor myConceptKeySignature = createDescriptorForKeySignature();
  /*package*/ final ConceptDescriptor myConceptMajorChord = createDescriptorForMajorChord();
  /*package*/ final ConceptDescriptor myConceptMajorScale = createDescriptorForMajorScale();
  /*package*/ final ConceptDescriptor myConceptMusicalElement = createDescriptorForMusicalElement();
  /*package*/ final ConceptDescriptor myConceptNote = createDescriptorForNote();
  /*package*/ final ConceptDescriptor myConceptPitch = createDescriptorForPitch();
  /*package*/ final ConceptDescriptor myConceptPitchCollection = createDescriptorForPitchCollection();
  /*package*/ final ConceptDescriptor myConceptScale = createDescriptorForScale();
  /*package*/ final ConceptDescriptor myConceptSong = createDescriptorForSong();
  /*package*/ final EnumerationDescriptor myEnumerationChordType = new EnumerationDescriptor_ChordType();
  /*package*/ final EnumerationDescriptor myEnumerationMuscalMode = new EnumerationDescriptor_MuscalMode();
  /*package*/ final EnumerationDescriptor myEnumerationNoteName = new EnumerationDescriptor_NoteName();
  /*package*/ final EnumerationDescriptor myEnumerationNoteNameNormalized = new EnumerationDescriptor_NoteNameNormalized();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptChord, myConceptEmptySpace, myConceptHarmony, myConceptKeySignature, myConceptMajorChord, myConceptMajorScale, myConceptMusicalElement, myConceptNote, myConceptPitch, myConceptPitchCollection, myConceptScale, myConceptSong);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Chord:
        return myConceptChord;
      case LanguageConceptSwitch.EmptySpace:
        return myConceptEmptySpace;
      case LanguageConceptSwitch.Harmony:
        return myConceptHarmony;
      case LanguageConceptSwitch.KeySignature:
        return myConceptKeySignature;
      case LanguageConceptSwitch.MajorChord:
        return myConceptMajorChord;
      case LanguageConceptSwitch.MajorScale:
        return myConceptMajorScale;
      case LanguageConceptSwitch.MusicalElement:
        return myConceptMusicalElement;
      case LanguageConceptSwitch.Note:
        return myConceptNote;
      case LanguageConceptSwitch.Pitch:
        return myConceptPitch;
      case LanguageConceptSwitch.PitchCollection:
        return myConceptPitchCollection;
      case LanguageConceptSwitch.Scale:
        return myConceptScale;
      case LanguageConceptSwitch.Song:
        return myConceptSong;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationChordType, myEnumerationMuscalMode, myEnumerationNoteName, myEnumerationNoteNameNormalized);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForChord() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "Chord", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757f95629L);
    b.interface_();
    b.parent(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d35145L);
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651267249705");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptySpace() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "EmptySpace", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757cdb961L);
    b.class_(false, false, false);
    // extends: MusicTheoryLang.structure.MusicalElement
    b.super_(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757cdb8c1L);
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264391521");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHarmony() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "Harmony", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d2d2fbL);
    b.class_(false, true, false);
    // extends: MusicTheoryLang.structure.MusicalElement
    b.super_(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757cdb8c1L);
    b.parent(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d35145L);
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264725755");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForKeySignature() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "KeySignature", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d6b80dL);
    b.class_(false, false, false);
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264981005");
    b.version(3);
    b.property("tonic", 0x7c255ef757d6b80fL).type(MetaIdFactory.dataTypeId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92c0dL)).origin("8945660651264981007").done();
    b.aggregate("scale", 0x7c255ef757d9ee2aL).target(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d6b83cL).optional(false).ordered(true).multiple(false).origin("8945660651265191466").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMajorChord() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "MajorChord", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d2d3adL);
    b.class_(false, false, false);
    // extends: MusicTheoryLang.structure.Harmony
    b.super_(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d2d2fbL);
    b.parent(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757f95629L);
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264725933");
    b.version(3);
    b.property("root", 0x7c255ef757da0d2aL).type(MetaIdFactory.dataTypeId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92c0dL)).origin("8945660651265199402").done();
    b.alias("major_chord");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMajorScale() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "MajorScale", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d6b824L);
    b.class_(false, false, false);
    b.parent(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d6b83cL);
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264981028");
    b.version(3);
    b.property("mode", 0x7c255ef757dc4b3cL).type(MetaIdFactory.dataTypeId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757dc4b0fL)).origin("8945660651265346364").done();
    b.property("tonic", 0x7c255ef757dc8599L).type(MetaIdFactory.dataTypeId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92c0dL)).origin("8945660651265361305").done();
    b.alias("major_scale");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMusicalElement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "MusicalElement", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757cdb8c1L);
    b.class_(false, true, false);
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264391361");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNote() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "Note", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c9302aL);
    b.class_(false, false, false);
    // extends: MusicTheoryLang.structure.MusicalElement
    b.super_(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757cdb8c1L);
    b.parent(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92fa6L);
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264094250");
    b.version(3);
    b.property("name", 0x7c255ef757c93052L).type(MetaIdFactory.dataTypeId(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92c0dL)).origin("8945660651264094290").done();
    b.property("octave", 0x7c255ef757c951a3L).type(PrimitiveTypeId.INTEGER).origin("8945660651264102819").done();
    b.alias("note");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPitch() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "Pitch", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757c92fa6L);
    b.interface_();
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264094118");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPitchCollection() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "PitchCollection", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d35145L);
    b.interface_();
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264758085");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForScale() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "Scale", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757d6b83cL);
    b.interface_();
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264981052");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSong() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("MusicTheoryLang", "Song", 0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757cdb7e3L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:e8bf4a00-4d2c-41d0-918b-66974261049f(MusicTheoryLang.structure)/8945660651264391139");
    b.version(3);
    b.aggregate("elements", 0x7c255ef757cdb86fL).target(0x87d1018d30c44219L, 0x852f1bd942b093e8L, 0x7c255ef757cdb8c1L).optional(true).ordered(true).multiple(true).origin("8945660651264391279").done();
    b.alias("song");
    return b.create();
  }
}
