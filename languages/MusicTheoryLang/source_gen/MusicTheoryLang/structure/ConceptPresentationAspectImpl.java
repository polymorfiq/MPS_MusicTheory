package MusicTheoryLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Chord;
  private ConceptPresentation props_EmptySpace;
  private ConceptPresentation props_Harmony;
  private ConceptPresentation props_KeySignature;
  private ConceptPresentation props_MajorChord;
  private ConceptPresentation props_MajorScale;
  private ConceptPresentation props_MusicalElement;
  private ConceptPresentation props_Note;
  private ConceptPresentation props_Pitch;
  private ConceptPresentation props_PitchCollection;
  private ConceptPresentation props_Scale;
  private ConceptPresentation props_Song;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Chord:
        if (props_Chord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Chord = cpb.create();
        }
        return props_Chord;
      case LanguageConceptSwitch.EmptySpace:
        if (props_EmptySpace == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptySpace");
          props_EmptySpace = cpb.create();
        }
        return props_EmptySpace;
      case LanguageConceptSwitch.Harmony:
        if (props_Harmony == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Harmony = cpb.create();
        }
        return props_Harmony;
      case LanguageConceptSwitch.KeySignature:
        if (props_KeySignature == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("KeySignature");
          props_KeySignature = cpb.create();
        }
        return props_KeySignature;
      case LanguageConceptSwitch.MajorChord:
        if (props_MajorChord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("major_chord");
          props_MajorChord = cpb.create();
        }
        return props_MajorChord;
      case LanguageConceptSwitch.MajorScale:
        if (props_MajorScale == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("major_scale");
          props_MajorScale = cpb.create();
        }
        return props_MajorScale;
      case LanguageConceptSwitch.MusicalElement:
        if (props_MusicalElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MusicalElement = cpb.create();
        }
        return props_MusicalElement;
      case LanguageConceptSwitch.Note:
        if (props_Note == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("note");
          props_Note = cpb.create();
        }
        return props_Note;
      case LanguageConceptSwitch.Pitch:
        if (props_Pitch == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Pitch = cpb.create();
        }
        return props_Pitch;
      case LanguageConceptSwitch.PitchCollection:
        if (props_PitchCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PitchCollection = cpb.create();
        }
        return props_PitchCollection;
      case LanguageConceptSwitch.Scale:
        if (props_Scale == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Scale = cpb.create();
        }
        return props_Scale;
      case LanguageConceptSwitch.Song:
        if (props_Song == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Song = cpb.create();
        }
        return props_Song;
    }
    return null;
  }
}
